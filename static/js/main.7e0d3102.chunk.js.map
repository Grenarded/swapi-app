{"version":3,"sources":["drop_down/Dropdown.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","_ref","handleChange","handleSubmit","react_default","a","createElement","className","onSubmit","name","onChange","value","type","Card","extraInfo1","extraInfo2","extraInfo3","extraInfo4","CardList","item","map","test","i","src_Card","key","title","console","log","Object","entries","replace","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchfield","fetching","bind","assertThisInitialized","event","setState","target","_this2","fetchPage","url","fetch","then","response","json","data","concat","toConsumableArray","results","next","preventDefault","src_drop_down_Dropdown","src_CardList_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e0d3102.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = ({handleChange, handleSubmit}) => {\r\n    return(\r\n        <form className=\"custom-select\" onSubmit={handleSubmit}>\r\n            <select name=\"options\" onChange={handleChange}>\r\n                <option value=\"films\">Films</option>\r\n                <option value=\"planets\">Planets</option>\r\n                <option value=\"starships\">Starships</option>\r\n                <option value=\"vehicles\">Vehicles</option>\r\n                <option value=\"people\">People</option>\r\n                <option value=\"species\">Species</option>\r\n\t\t    </select><br></br>\r\n            <input className=\"submit-btn\" type=\"submit\" value=\"Show results\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\r\n// import './Card.css';\r\n\r\nconst Card = ({ name, extraInfo1, extraInfo2, extraInfo3, extraInfo4 }) => {\r\n    return(\r\n        // <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        // <div className=\"ba b--red\">\r\n        <div className=\"data\">\r\n            <h3>{name}</h3>\r\n            <h6>{extraInfo1}</h6>\r\n            <h6>{extraInfo2}</h6>\r\n            <h6>{extraInfo3}</h6>\r\n            <h6>{extraInfo4}</h6>\r\n            {/* <h6>{extraInfo5}</h6>\r\n            <h6>{extraInfo6}</h6> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './CardList.css'\r\n\r\nconst CardList = ({ item }) => {\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            {\r\n                item.map((test, i) => {\r\n                    return(\r\n                        <Card\r\n                        key={i} \r\n                        name={item[i].title || item[i].name}\r\n                        extraInfo1={console.log(Object.entries(Object.entries(item)[i][1])[1][0].replace(/_/g, \" \") + ': ' \r\n                                    + Object.entries(Object.entries(item)[i][1])[1][1])}\r\n\r\n                        extraInfo2={Object.entries(Object.entries(item)[i][1])[2][0].replace(/_/g, \" \") + ': ' \r\n                        + Object.entries(Object.entries(item)[i][1])[2][1]}\r\n\r\n                        extraInfo3={Object.entries(Object.entries(item)[i][1])[3][0].replace(/_/g, \" \") + ': ' \r\n                        + Object.entries(Object.entries(item)[i][1])[3][1]}\r\n\r\n                        extraInfo4={Object.entries(Object.entries(item)[i][1])[4][0].replace(/_/g, \" \") + ': ' \r\n                        + Object.entries(Object.entries(item)[i][1])[4][1]}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\nimport Dropdown from './drop_down/Dropdown';\nimport CardList from './CardList';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      item: [],\n      value: 'films',\n      searchfield: '',\n      fetching: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n\n    this.setState({\n      item: [],\n    });\n\n    let fetchPage = (url) => {\n      this.setState({\n        fetching: true\n      });\n      fetch(url)\n      .then(response => response.json())\n      .then(data => {\n          this.setState({\n            item: [...this.state.item, ...data.results]\n          })\n        if (data.next != null) {\n          fetchPage(data.next);\n        } else{\n          this.setState({\n            fetching: false\n          })\n        }\n      })\n    }\n    fetchPage(`https://swapi.co/api/${this.state.value}/?page=1`);\n    event.preventDefault();\n  }\n\n  render() {\n    return(\n      <div className>\n      <header>\n        <div className=\"header-container\">\n            <h1 className=\"title\">The <span className=\"spacing\">Star</span> Wars App</h1>\n            <div className=\"right\">\n              I want information about:\n              <Dropdown handleChange={this.handleChange} handleSubmit={this.handleSubmit}/>\n            </div>\n          </div>\n      </header>\n        <div className=\"tc\">\n          {\n            this.state.fetching ? <h1>Loading...</h1> : \n            <CardList item={this.state.item}/>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}